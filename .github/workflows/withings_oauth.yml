name: Withings OAuth Handskake

on:
  workflow_dispatch:
    inputs:
      code:
        description: "Paste the ?code=... from your redirect page (leave blank to generate the auth URL)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  oauth:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve repository variables
        id: res
        shell: bash
        env:
          VAR_CLIENT_ID:    ${{ vars.WITHINGS_CLIENT_ID }}
          VAR_REDIRECT_URI: ${{ vars.WITHINGS_REDIRECT_URI }}
        run: |
          set -euo pipefail

          # Validate required vars
          if [ -z "${VAR_CLIENT_ID}" ] || [ -z "${VAR_REDIRECT_URI}" ]; then
            echo "Client ID or Redirect URI variable missing." >&2
            echo "Set repo variables:" >&2
            echo "  WITHINGS_CLIENT_ID" >&2
            echo "  WITHINGS_REDIRECT_URI (e.g. https://ricwheatley.github.io/fitness-oauth-bridge/ )" >&2
            exit 1
          fi

          # Tidy redirect and validate
          REDIRECT_RAW="$(printf '%s' "$VAR_REDIRECT_URI" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/^s:\/\//https:\/\//')"
          if ! echo "$REDIRECT_RAW" | grep -qi '^http'; then
            echo "Redirect must start with http/https. Got: $REDIRECT_RAW" >&2
            exit 1
          fi

          # URL-encode redirect using jq (no heredoc/python)
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null
          REDIRECT_ENC="$(printf '%s' "$REDIRECT_RAW" | jq -sRr @uri)"

          {
            echo "client_id=$VAR_CLIENT_ID"
            echo "redirect_raw=$REDIRECT_RAW"
            echo "redirect_enc=$REDIRECT_ENC"
          } >> "$GITHUB_OUTPUT"

      - name: Authorise or Exchange (vars + secret)
        shell: bash
        env:
          CODE_RAW:        ${{ github.event.inputs.code }}
          CLIENT_ID:       ${{ steps.res.outputs.client_id }}
          REDIRECT_RAW:    ${{ steps.res.outputs.redirect_raw }}
          REDIRECT_ENC:    ${{ steps.res.outputs.redirect_enc }}
          CLIENT_SECRET:   ${{ secrets.WITHINGS_CLIENT_SECRET }}
        run: |
          set -euo pipefail

          if [ -z "${CLIENT_SECRET}" ]; then
            echo "WITHINGS_CLIENT_SECRET secret is missing (Settings -> Secrets and variables -> Actions -> New repository secret)." >&2
            exit 1
          fi

          # Withings expects comma-separated scopes; fixed state
          SCOPES="user.metrics,user.activity"
          STATE="ric_state_123"

          AUTH_URL="https://account.withings.com/oauth2_user/authorize2?response_type=code&client_id=${CLIENT_ID}&state=${STATE}&scope=${SCOPES}&redirect_uri=${REDIRECT_ENC}"

          if [ -z "${CODE_RAW}" ]; then
            {
              echo "## Withings Authorisation"
              echo
              echo "- Client ID: ${CLIENT_ID}"
              echo "- Redirect: ${REDIRECT_RAW}"
              echo "- Scopes: ${SCOPES}"
              echo "- State: ${STATE}"
              echo
              echo "Tap this link to authorise, then re-run with the code pasted below:"
              echo
              echo "${AUTH_URL}"
            } >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          # Sanitise code
          CODE="$(printf '%s' "$CODE_RAW" | tr -d '\r' | tr -d '"' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')"
          if [ -z "$CODE" ]; then
            echo "No code provided after sanitising input." >&2
            exit 1
          fi

          echo "Exchanging code for tokens…"
          RESP="$(curl -sS -X POST "https://wbsapi.withings.net/v2/oauth2" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode action=requesttoken \
            --data-urlencode grant_type=authorization_code \
            --data-urlencode client_id="${CLIENT_ID}" \
            --data-urlencode client_secret="${CLIENT_SECRET}" \
            --data-urlencode code="${CODE}" \
            --data-urlencode redirect_uri="${REDIRECT_RAW}")"

          STATUS="$(printf '%s' "$RESP" | jq -r '.status // empty' 2>/dev/null || echo "")"
          if [ "$STATUS" != "0" ]; then
            {
              echo "## Exchange Failed"
              echo
              echo "Redirect: ${REDIRECT_RAW}"
              echo "Client ID: ${CLIENT_ID}"
              echo "Code length: ${#CODE}"
              echo
              echo "Raw response:"
              printf '%s\n' "$RESP" | jq . 2>/dev/null || printf '%s\n' "$RESP"
              echo
              echo "Hints:"
              echo "- Codes are single-use and expire quickly; authorise then exchange immediately."
              echo "- Client secret/env mismatch will make a fresh code look invalid."
              echo "- Redirect must match the app exactly, including trailing slash."
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          REFRESH="$(printf '%s' "$RESP" | jq -r '.body.refresh_token // empty')"
          EXPIRES="$(printf '%s' "$RESP" | jq -r '.body.expires_in // empty')"

          {
            echo "## ✅ Success - Save Your Refresh Token"
            echo
            echo "Create or update a Secret named WITHINGS_REFRESH_TOKEN with the value below:"
            echo
            echo "$REFRESH"
            echo
            echo "Access token TTL (s): ${EXPIRES}"
          } >> "$GITHUB_STEP_SUMMARY"
